name: Release and Publish

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

env:
  DOTNET_VERSION: '9.0.x'
  SOLUTION_FILE: 'AQ.sln'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/v}
        fi
        
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease (contains alpha, beta, rc, or preview)
        if [[ $VERSION =~ (alpha|beta|rc|preview) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate version format
      run: |
        if ! [[ ${{ steps.version.outputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
          echo "Invalid version format: ${{ steps.version.outputs.version }}"
          exit 1
        fi

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props', '**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
    
    - name: Update version in Directory.Build.props
      run: |
        sed -i 's/<Version>.*<\/Version>/<Version>${{ needs.validate-release.outputs.version }}<\/Version>/' Directory.Build.props
    
    - name: Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}
    
    - name: Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --configuration Release --no-restore
    
    - name: Run tests
      run: dotnet test ${{ env.SOLUTION_FILE }} --configuration Release --no-build --verbosity normal
    
    - name: Create NuGet packages
      run: dotnet pack ${{ env.SOLUTION_FILE }} --configuration Release --no-build --output ./packages
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/*.nupkg
        retention-days: 30

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-package]
    environment: production
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Publish to NuGet
      run: |
        for package in ./packages/*.nupkg; do
          echo "Publishing $package"
          dotnet nuget push "$package" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: Release v${{ needs.validate-release.outputs.version }}
        body: |
          ## Release Notes for v${{ needs.validate-release.outputs.version }}
          
          ### Packages Published:
          - AQ.Common.Domain v${{ needs.validate-release.outputs.version }}
          - AQ.Common.Application v${{ needs.validate-release.outputs.version }}
          - AQ.Common.Infrastructure v${{ needs.validate-release.outputs.version }}
          - AQ.Common.Presentation v${{ needs.validate-release.outputs.version }}
          
          ### Installation
          ```bash
          dotnet add package AQ.Common.Domain --version ${{ needs.validate-release.outputs.version }}
          dotnet add package AQ.Common.Application --version ${{ needs.validate-release.outputs.version }}
          dotnet add package AQ.Common.Infrastructure --version ${{ needs.validate-release.outputs.version }}
          dotnet add package AQ.Common.Presentation --version ${{ needs.validate-release.outputs.version }}
          ```
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-package]
    if: always() && needs.build-and-package.result == 'success'
    
    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages
        path: ./packages
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Add GitHub Package Registry source
      run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
    
    - name: Publish to GitHub Packages
      run: |
        for package in ./packages/*.nupkg; do
          echo "Publishing $package to GitHub Packages"
          dotnet nuget push "$package" --source github --skip-duplicate
        done
